
This is a repository for the entire mockspec pipeline that uses functional forms
of the python code. 

To run this code, the following python packgages need to be installed:
    numpy
    pytables
    pandas


Overview:

    This code generates synthetic quasar absorption lines by running lines of sight (LOS) 
    through a simulated galaxy made with ART.  This repository has all the code required
    to generate and analyze the spectra. 


Before you run the code:
    
    There are a few steps that need to be taken before the code can be run. 

    1) Get the simulation in the correct format. ART output the entire simulation box, 
       typicaly 10Mpc along a side. Mockspec does not run on these boxes. It instead
       runs on a small box selected from the large box. This selection is done using 
       ANA, a code written by Daniel Ceverino and greatly imporved by Kenza Arraki. 
       It is found in funcs/ana/. Running ANA can be challenging. It reuires the 
       following simulation files:
            10MpcBox_HartGal_csf_a0.300.di
            10MpcBox_HartGal_csf.d
            PMcrda0.300.DAT
            PMcrs0a0.300.DAT    
            sf.dat

        To control the run of ANA, there are two control file: 
            control.dat 
            schedule_R.dat
    
        Schedule_R.dat has most of the controls in it. The top section has flags as
        to what the code should read in and what files it should produce. The sections 
        that definately need to have a 1 are:
            Read N-body file
            Read stellar file
            Read HYDRO file
            Set units and global variables
            Find halo center using particle distribution
            Compute angular momentum
            density, temperature, entropy profiles and Rvir calculation
            Binary file with gas cells inside 4Rvir-box
            Binary file with gas cells inside 4Rvir-box (metalliciites)
        Most of the rest of the file should not be touched. 
        ANA has an interesting behaviour where it finds the center of the galaxy, but
        is super bad at it. You need to find the center with Rockstar and put it in 
        manually. The coordinates are put in on the lines "xuser", "yuser", "zuser". 
        The flag in front of "ioptCenter=1/2/3-->potential/HF/IFRIT" should be 
        set to 1, indicating the center is from a halo finder.

        To setup control.dat, only change after the three repeated lines of "1. 129". 
        The single number on the next line is the number of snapshots to run ANA on.
        Leave this as one. The rest of the file is the list of expansion parameters
        of the snapshots. Even if there are several numbers listed here, ANA will only 
        run on the first one, since the number of snapshots to run is set to 1. 

        Once both control.dat and schedule_R.dat are set, run ana.R.exe
        The file needed is the GZ file. 

    2) The pipeline does not run on the binary files. It runs on an ASCII version 
        of the file. To convert, use readbinary.exe. Run it with the format of 
        
            readbinary.exe <binary file> <name of output ASCII file> GZ

        The name of the output ASCII file should be the name of the binary file,
        but with .dat replaced with .txt


    3) Configure the run. The parameters of the run are set in the mockspec.config 
       file. There are three sections in this file. The first describes the 
       galaxy and basic code parameters.  These are mostly self-explanatory. The
       number of cores only affects the codes that can be run with parallization,
       namely cellfinder. The root location is not used by anything, so don't change it
    
       The second section determines which codes will be run. A 1 turns the code on, 
       a 0 turns it off. 

       The third section describes the ions to be probed and what instrument will be
       used for that ion. 


    4) Ensure the directory has all required files, namely the galaxy file 

    5) Make all compiled codes. This includes: cellfinder, los7, specsynth, sysabs, and cullabs

    6)

  
Running the code:
    The main driver is mockspec.py. Run this in the directory with the snapshot.   
    The final output is the ALL sysabs  
